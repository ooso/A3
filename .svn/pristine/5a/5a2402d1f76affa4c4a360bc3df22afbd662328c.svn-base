package com.op_dfat;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Build;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.Html;
import android.text.InputType;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Activity_app_details extends AppCompatActivity {

    ListView listView;
    String appName;
    String packageName;
    String scanTime;
    ArrayList<String> tmp = new ArrayList<>();

    SqliteDBHelper sqliteDBHelper;
    AlertDialog alertDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_app_details);

        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);

        sqliteDBHelper = SqliteDBHelper.getInstance(this);
        listView = (ListView) findViewById(R.id.listViewResources);

        Intent intent = getIntent();
        appName = intent.getStringExtra("appName");
        packageName = intent.getStringExtra("packageName");
        scanTime = intent.getStringExtra("scanTime");

        createList(packageName, scanTime);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(alertDialog != null) {
            alertDialog.dismiss();
            alertDialog = null;
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_options, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void createList(final String packageName, final String scanTime){

        final ImageView iv = (ImageView) findViewById(R.id.appDetailIcon);
        final TextView tv = (TextView) findViewById(R.id.appDetailName);
        final Button reportButton = (Button) findViewById(R.id.buttonMassReport);

        new AsyncTask<Void, Void, List<PermissionInfo>>() {

            @Override
            protected List<PermissionInfo> doInBackground(Void... voids) {
                final List<PermissionInfo> permissionInfoList = getResourceAndCountAndAnomaly(packageName, scanTime);

                Collections.sort(permissionInfoList);

                return permissionInfoList;
            }

            @Override
            protected void onPostExecute(final List<PermissionInfo> resources) {

                iv.setImageDrawable(Utility.getAppIcon(getApplicationContext(), packageName));
                tv.setText(appName);

                final Adapter_App_Details adapter = new Adapter_App_Details(getApplicationContext(), R.id.activity_app_details, resources, packageName);

                // Assign adapter to ListView
                listView.setAdapter(adapter);

                adapter.notifyDataSetChanged();

                // ListView Item Click Listener
                listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {

                        String msg;

                        alertDialog = new AlertDialog.Builder(Activity_app_details.this).create();

                        alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(R.string.buttonCancel),
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                    }
                                });

                        // sets up the dialog and onClick action when the resource is anomalous
                        if (resources.get(position).anomalyInfos.get(position).isAnomalous.equals("1")) {
                            alertDialog.setTitle(R.string.anomalousResourceDialogTitle);
                            msg = "Access Times: \n\n";
                            Map<String, String> accessTimes = getAccessTimesAndReasonsOfAnomalousPermission(packageName, resources.get(position).permission, scanTime);
                            for (Map.Entry<String, String> entry: accessTimes.entrySet()) {
                                String accessTime = entry.getKey();
                                String reason = entry.getValue();
                                msg += accessTime.substring(11) + " \n\t" + reason;
                            }

                            msg += "\n" + getString(R.string.anomalousResourceDeReportText);
                            alertDialog.setMessage(msg);
                            alertDialog.setIcon(R.drawable.boo);

                            // text input for the explanation from the user why he reported this resource
                            final EditText input = new EditText(Activity_app_details.this);
                            input.setInputType(InputType.TYPE_CLASS_TEXT);

                            alertDialog.setView(input);
                            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, getString(R.string.buttonDeReport),
                                    new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                            String reasonForDeReporting = input.getText().toString();
                                            dereportApp(appName, resources.get(position).permission, reasonForDeReporting);
                                        }
                                    });
                            alertDialog.show();
                        }
                    }
                });

                setupReportButton(adapter, reportButton, resources);

            }

        }.execute();
    }

    private void setupReportButton (final Adapter_App_Details adapter_app_details, Button reportButton, final List<PermissionInfo> resources) {

        reportButton.setOnClickListener(new View.OnClickListener() {

            int resourceCount = listView.getAdapter().getCount();
            int[] arrayIsChecked = new int[resourceCount];

            @Override
            public void onClick(View v) {

                boolean checkedAnything = false;

                for (int i = 0; i < resourceCount; i++) {

                    CheckBox cb = (CheckBox) listView.getChildAt(i).findViewById(R.id.checkboxMassReport);
                    if(cb.isChecked()){
                        arrayIsChecked[i] = 1;
                        checkedAnything = true;
                    }else{
                        arrayIsChecked[i] = 0;
                    }
                }
                AlertDialog alertDialog = new AlertDialog.Builder(Activity_app_details.this).create();

                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, getString(R.string.buttonCancel),
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });

                if (checkedAnything) {

                    String msg = "";
                    final EditText input = new EditText(Activity_app_details.this);
                    input.setInputType(InputType.TYPE_CLASS_TEXT);
                    alertDialog.setView(input);

                    alertDialog.setTitle(getString(R.string.massReportResourceDialogTitle));

                    for (int j = 0; j < arrayIsChecked.length; j++) {
                        if (arrayIsChecked[j] == 1) {
                            msg = "Access Times: \n\n";
                            Log.d("TEST", resources.get(j).permission);
                            Map<String, String> accessTimes = getAccessTimesAndReasonsOfAnomalousPermission(packageName, resources.get(j).permission, scanTime);
                            for (Map.Entry<String, String> entry: accessTimes.entrySet()) {
                                String accessTime = entry.getKey();
                                String reason = entry.getValue();
                                msg += accessTime.substring(11) + " \n\t" + reason;
                            }

                        }
                    }
                    msg += "\n" + getString(R.string.massReportResourceDialogText);
                    alertDialog.setMessage(msg);

                    alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, getString(R.string.buttonReport),
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    String reasonForReporting = input.getText().toString();
                                    for (int j = 0; j < arrayIsChecked.length; j++) {
                                        if (arrayIsChecked[j] == 1) {
                                            if(Utility.isInternetAvailable(getApplicationContext())) {
                                                MyClient.POST_Anomaly(packageName, resources.get(j).permission, reasonForReporting, "1");
                                                updateReported(packageName, resources.get(j).permission);
                                                Toast.makeText(getApplicationContext(), getString(R.string.toastTransmissionConfirmation), Toast.LENGTH_SHORT).show();
                                            }
                                        }
                                    }
                                    adapter_app_details.notifyDataSetChanged();
                                }
                            });
                }else{
                    alertDialog.setTitle(R.string.noCheckboxSelectedTitle);
                    alertDialog.setMessage(getString(R.string.noCheckboxSelectedText));
                }
                alertDialog.show();
            }
        });
    }

    private ArrayList<PermissionInfo> getResourceAndCountAndAnomaly(String packageName, String scanTime) {
        Cursor cursor = sqliteDBHelper.get_data("SELECT " + SqliteDBStructure.PERMISSION + ", " + SqliteDBStructure.COUNT + ", " + SqliteDBStructure.IS_ANOMALOUS +
                " FROM " + SqliteDBStructure.DATA_ANALYZING +
                " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + scanTime + "' AND " + SqliteDBStructure.PACKAGE_NAME + " = '" + packageName + "'" +
                " GROUP BY " + SqliteDBStructure.PERMISSION +
                " ORDER BY " + SqliteDBStructure.COUNT + " DESC");

        ArrayList<PermissionInfo> tmp = new ArrayList<>();

        if (cursor != null) {
            cursor.moveToFirst();
        } else {
            tmp.add(new PermissionInfo("Error:No Permissions", "Error:0",  null));
            return tmp;
        }

        while (!cursor.isAfterLast()) {
            PermissionInfo permissionInfo = new PermissionInfo(cursor.getString(cursor.getColumnIndexOrThrow(SqliteDBStructure.PERMISSION)),
                                                                  cursor.getString(cursor.getColumnIndexOrThrow(SqliteDBStructure.COUNT)),
                                                                   null);
            if (!tmp.contains(permissionInfo)) {
                tmp.add(permissionInfo);
            }
            cursor.moveToNext();
        }

       return tmp;
    }

    private Map<String, String> getAccessTimesAndReasonsOfAnomalousPermission(String packageName, String permission,  String scanTime){
        Cursor cursor = sqliteDBHelper.get_data("SELECT " + SqliteDBStructure.ACCESS_TIME + ", " + SqliteDBStructure.ANOMALY_REASON +
                                                " FROM " + SqliteDBStructure.DATA_ANALYZING +
                                                " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + scanTime + "' AND " + SqliteDBStructure.PACKAGE_NAME + " = '" + packageName + "' AND " + SqliteDBStructure.PERMISSION + " = '" + permission + "'" +
                                                " ORDER BY DATETIME('" + SqliteDBStructure.ACCESS_TIME + "') DESC");
        Map<String, String> tmp = new HashMap<>();
        if (cursor == null) {
            tmp.put("Error: No Access Times", "Error: No Anomaly Reasons");
            return tmp;
        } else {
            cursor.moveToFirst();
        }

        while (!cursor.isAfterLast()) {
            String accessTime = cursor.getString(cursor.getColumnIndexOrThrow(SqliteDBStructure.ACCESS_TIME));
            String reason = cursor.getString(cursor.getColumnIndexOrThrow(SqliteDBStructure.ANOMALY_REASON));
            tmp.put(accessTime, reason);

            cursor.moveToNext();
        }
        return tmp;
    }

    private void updateReported(String packageName, String permission) {
        sqliteDBHelper.query("UPDATE " + SqliteDBStructure.DATA_ANALYZING + " SET " + SqliteDBStructure.REPORTED + " = 1 WHERE " + SqliteDBStructure.PACKAGE_NAME + " = '" + packageName + "' AND " + SqliteDBStructure.PERMISSION + " = '" + permission + "'");
    }

    private void dereportApp(String packageName, String permission, String reason){
        MyClient.POST_Anomaly(packageName, permission, reason, "-1");
    }

    public void getAppsToScan(MenuItem item){
        Intent intent = new Intent(getApplicationContext(), Activity_Apps_to_scan.class);
        startActivity(intent);
    }

    public void getHelp(MenuItem item){

        android.support.v7.app.AlertDialog.Builder builder = new android.support.v7.app.AlertDialog.Builder(this);

        builder.setTitle("Hilfe");
        android.content.res.Resources res = getResources();

        String text = String.format(res.getString(R.string.HelpText));

        if(Build.VERSION.SDK_INT >= 24){

            builder.setMessage(Html.fromHtml((text), Html.FROM_HTML_MODE_LEGACY)).show();//for 24 API and More
        }
    }

    public void getAboutUs(MenuItem item){

        android.support.v7.app.AlertDialog.Builder builder = new android.support.v7.app.AlertDialog.Builder(this);

        builder.setTitle("Impressum");
        android.content.res.Resources res = getResources();

        String text = String.format(res.getString(R.string.ImpressumText));

        if(Build.VERSION.SDK_INT >= 24){

            builder.setMessage(Html.fromHtml((text), Html.FROM_HTML_MODE_LEGACY)).show();//for 24 API and More
        }
    }

    public void settingsButton(MenuItem item) {
        Intent intent = new Intent(getApplicationContext(), SettingsPage.class);
        startActivity(intent);
    }

}
