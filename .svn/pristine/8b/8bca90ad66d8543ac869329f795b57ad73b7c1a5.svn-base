package com.op_dfat;

import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.TextView;

import java.sql.SQLClientInfoException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import static android.content.ContentValues.TAG;
import static android.graphics.Color.RED;


/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link Fragment_old.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link Fragment_old#newInstance} factory method to
 * create an instance of this fragment.
 */
public class Fragment_old extends Fragment {
    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private ListView lv;
    private SearchView sv;
    ArrayAdapter<String> arrayAdapter;
    private OnFragmentInteractionListener mListener;

    public Fragment_old() {
        // Required empty public constructor
    }

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment Fragment_old.
     */
    // TODO: Rename and change types and number of parameters
    public static Fragment_old newInstance(String param1, String param2) {
        Fragment_old fragment = new Fragment_old();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mParam1 = getArguments().getString(ARG_PARAM1);
            mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_old, container, false);

        // Inflate the layout for this fragment
        return view;
    }

    /* Function created by default and is called by a button that was deleted
    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }
    */

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        void onFragmentInteraction(Uri uri);
    }

    public void getScanList(){
        sv = (SearchView) getView().findViewById(R.id.searchViewScans);
        lv = (ListView) getView().findViewById(R.id.listViewScans);
        ArrayList<String> scanList = createList();


        arrayAdapter = new MyArrayAdapter(getActivity(), android.R.layout.simple_list_item_1, scanList);
        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                String timestamp = lv.getItemAtPosition(i).toString();

                Intent intent = new Intent(getActivity().getApplicationContext(), Activity_apps.class);
                intent.putExtra("timestamp", timestamp);
                startActivity(intent);
            }
        });
        lv.setAdapter(arrayAdapter);
        lv.setTextFilterEnabled(true);
        setupSearchView();
    }

    public ArrayList createList(){

        SqliteDBHelper db = SqliteDBHelper.getInstance(getActivity());
        //ArrayList<String> scanList = db.query_select_list("SELECT DISTINCT " + SqliteDBStructure.SCAN_TIME + " FROM " + SqliteDBStructure.DATA_ANALYZING);
        ArrayList<String> scanList = db.query_select_list("SELECT " + SqliteDBStructure.SCAN_TIME + " FROM " + SqliteDBStructure.SCAN_TIMES_LOGGED + " ORDER BY datetime(" + SqliteDBStructure.SCAN_TIME + ") DESC");

        for (int i = 0; i < scanList.size(); i++) {
            scanList.set(i, Utility.formateDateFromstring(scanList.get(i)));
        }

        return scanList;
    }


    private void setupSearchView(){
        sv.setIconifiedByDefault(false);
        sv.setOnQueryTextListener(
                new SearchView.OnQueryTextListener(){

                    @Override
                    public boolean onQueryTextSubmit(String query) {

                        return false;
                    }

                    @Override
                    public boolean onQueryTextChange(String newText) {
                            arrayAdapter.getFilter().filter(newText);
                        return true;
                    }
                }
        );
        // activates a submit button at the end of the SearchView
        // sv.setSubmitButtonEnabled(true);
        sv.setQueryHint("Search Here");
    }

    private class MyArrayAdapter extends ArrayAdapter<String> implements Filterable {

        private ArrayList<String> scanList = new ArrayList<>();
        private ArrayList<String> filtered = new ArrayList<>();
        private Filter filter;

        public MyArrayAdapter(Context context, int resource, ArrayList<String> scanList) {
            super(context, resource);
            this.scanList = scanList;
            this.filtered = scanList;
        }

        @NonNull
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            return super.getView(position, convertView, parent);
        }

        @Override
        public int getCount() {
            return filtered.size();
        }

        @Nullable
        @Override
        public String getItem(int position) {
            return filtered.get(position);
        }


        @NonNull
        @Override
        public Filter getFilter() {
            if (filter == null) {
                filter = new FilterNames();
            }
            return filter;
        }

        private class FilterNames extends Filter {

            @Override
            protected FilterResults performFiltering(CharSequence charSequence) {

                FilterResults results = new FilterResults();

                if (charSequence != null && charSequence.length() != 0) {
                    ArrayList<String> resultList = new ArrayList<>();
                    for (String scan: scanList) {
                        if (scan.contains(charSequence.toString().toLowerCase())) {
                            resultList.add(scan);
                        }
                    }

                    results.count = resultList.size();
                    results.values = resultList;
                } else {
                    results.count = scanList.size();
                    results.values = scanList;
                }
                return results;
            }

            @Override
            protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                filtered = (ArrayList<String>) filterResults.values;

                notifyDataSetChanged();
            }
        }
    }
}
