package com.op_dfat;

import android.app.Activity;
import android.app.Service;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.IBinder;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class MyService extends Service {
    // binder that is given to the clients, who wish to bind to this service
    private final IBinder mBinder = new LocalBinder();

    // repeat rate: every 5 seconds
    private static final long REPEAT_TIME = 5;
    // stores the start time of the most recent scan
    private long start_scan_time_ms;

    // scheduled thread pool executor, which handles tasks and threads
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = null;
    // futures, which store information about the scheduled tasks
    ScheduledFuture<?> scan_future, check_motion_future;

    // variable, which checks whether we are currently analyzing
    public boolean analyzing = false;
    // variable, which checks whether the motion sensors have been started
    private boolean motion_sensor_started = false;
    // references the all the necessary instances
    private SqliteDBHelper sqliteDB;
    private UsageManager usageManager;
    private PermissionLogReader permissionLogReader;
    private MotionSensors motionSensors;


    public class LocalBinder extends Binder
    {
        MyService getService() {
            // Return this instance of LocalService so clients can call public methods
            return MyService.this;
        }
    }

    public Runnable logReader = new Runnable()
    {
        @Override
        public void run() {
            try {
                // read the permission log
                permissionLogReader.readPermissionLogReader(usageManager, sqliteDB, start_scan_time_ms);
            } catch (RuntimeException e) {
                e.printStackTrace();
            }
        }
    };


    public Runnable check_motion_future_sensors = new Runnable() {
        @Override
        public void run() {
            // start the motion sensor
            motionSensors.checkMotionSensors(getApplicationContext());
        }
    };

    public Runnable stop_check_motion_future = new Runnable() {
        @Override
        public void run() {
            motionSensors.stopCheckingMotionSensors();
        }
    };

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }


    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // when service is started, send the information whether the service is currently analyzing
        Log.d("MYSERVICE", "Service started");
        sendAnalyzingState();
        return START_STICKY;
    }

    @Override
    public void onCreate ()
    {
        super.onCreate ();
        // get references to all necessary instances
        sqliteDB = SqliteDBHelper.getInstance(getApplicationContext());
        usageManager = UsageManager.getInstance(getApplicationContext(), null);
        permissionLogReader = PermissionLogReader.getInstance(getApplicationContext());
        motionSensors = MotionSensors.getInstance(getApplicationContext());

        // instantiate the thread pool executor, which handles the threads
        if (scheduledThreadPoolExecutor == null)
            scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
        // set policies on task termination
        scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);
        scheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    }

    @Override
    public void onDestroy ()
    {
        Log.d("MYSERVICE", "Service canceled");
        // save data before service is terminated
        saveBeforeClose();
        super.onDestroy ();
    }

    public void startAnalyzing (long _start_scan_time_ms) {
        // set the new scan start of this scan period
        start_scan_time_ms = _start_scan_time_ms;

        // if we are not currently analyzing ...
        if (!analyzing) {
            // start the motion sensor after 1 millisecond
            if (!motion_sensor_started) {
                check_motion_future = scheduledThreadPoolExecutor.schedule(check_motion_future_sensors, 0, TimeUnit.MILLISECONDS);
                motion_sensor_started = true;
            }
            // schedule the scan task at a fixed repeat rate
            if (scheduledThreadPoolExecutor != null) {
                scan_future = scheduledThreadPoolExecutor.scheduleAtFixedRate(logReader, 0, REPEAT_TIME, TimeUnit.SECONDS);
            }
            analyzing = true;
        }
        // send the current scan state as a broadcast
        sendAnalyzingState();
    }

    public void stopAnalyzing () {
        // if we are currently analyzing ...
        if (analyzing) {
            // send an intent to the receiver which stops any ongoing alarm setups
            sendCancelAlarm();
            // ...stop all currently running tasks
            if (!scan_future.isCancelled()) {
                scan_future.cancel(true);
            }
            if (motion_sensor_started) {
                check_motion_future.cancel(false);
                motion_sensor_started = false;
                scheduledThreadPoolExecutor.schedule(stop_check_motion_future, 0, TimeUnit.MILLISECONDS);
            }
            Log.d("MYSERVICE", "Analysis canceled");
            analyzing = false;
        }
        // send the current scan state as a broadcast
        sendAnalyzingState();
    }

    private void saveBeforeClose() {
        // cancel all currently running tasks
        if (scan_future != null) {
            scan_future.cancel(true);
        }
        if (check_motion_future != null) {
            check_motion_future.cancel(false);
            motion_sensor_started = false;
        }
        // shutdown the thread pool executor
        if (scheduledThreadPoolExecutor != null) {
            scheduledThreadPoolExecutor.shutdown();
        }
        // write the content of the DB to a file
        sqliteDB.writeDBtoFile();
    }

    public void writeDBtoFile() {
        sqliteDB.writeDBtoFile();
    }

    // ask permission to write to storage
    public void DBtoFile(Activity activity) {
        // "formulate", which permissions are required
        String[] permissionStorage = {android.Manifest.permission.READ_EXTERNAL_STORAGE, android.Manifest.permission.WRITE_EXTERNAL_STORAGE};
        // check, if permissions are granted
        int permission = ActivityCompat.checkSelfPermission(activity, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (permission != PackageManager.PERMISSION_GRANTED) {
            // if permissions are denied, notify user to grant required permissions
            ActivityCompat.requestPermissions(activity, permissionStorage, 1);
        } else {
            // if permissions were granted, write DB content to text file
            sqliteDB.writeDBtoFile();
        }
    }

    public void sendAnalyzingState () {
        // send a broadcast about the current analysis state, which will be received by the broadcast receiver in the main activity
        Intent intent = new Intent();
        intent.setAction(MainActivity.ANALYZING);
        intent.putExtra("analyzing", analyzing);
        sendBroadcast(intent);
    }

    public void sendCancelAlarm () {
        // send a broadcast about the current analysis state, which will be received by the broadcast receiver in the main activity
        Intent intent = new Intent();
        intent.setAction(MainActivity.CANCEL_ALARM);
        sendBroadcast(intent);
    }
}
