package com.op_dfat;

import android.app.IntentService;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.Network;
import android.net.NetworkInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

/**
 * Created by Marvin on 12.12.2016.
 */

public class Datamining {

    ArrayList<String> pkgNames;
    ArrayList<Integer> anomalies;

    SqliteDBHelper sqliteDBHelper;
    public String actTimeStamp;
    Date start_scan_time, stop_scan_time;

    private static Datamining datamining;
    Context context;

    private Datamining(Context context) {
        sqliteDBHelper = SqliteDBHelper.getInstance(context);
        start_scan_time = new Date();
        stop_scan_time = new Date();
        this.context = context;
    }

    public static Datamining getInstance (Context context) {
        if (datamining == null) {
            datamining = new Datamining(context);
        }
        return datamining;
    }

    public void startAnalysis(long analysis_start, long analysis_stop) {
        start_scan_time.setTime(analysis_start);
        stop_scan_time.setTime(analysis_stop);

        actTimeStamp = Utility.dateTime(stop_scan_time);

        if (Utility.isInternetAvailable(context))
            sendRawData();
        pkgNames = getAppName();
        anomalies = buildZeroArrayList(pkgNames);
        Collections.sort(pkgNames);
        collectResInfos(pkgNames);
        insertCurrentScanTime();
    }

    private void insertCurrentScanTime () {
        sqliteDBHelper.insert_into_scan_times_logged(stop_scan_time);
    }

    private ArrayList<String> getAppName() {
        return sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.APP_NAME + " FROM " + SqliteDBStructure.APPS_LOGGED);
    }

    private ArrayList<Integer> buildZeroArrayList(ArrayList<String> names){
        ArrayList<Integer> list = new ArrayList();
        for(int i = 0; i < names.size(); i++){
            list.add(i, 0);
        }
        return list;
    }

    private void collectResInfos(ArrayList<String> names){
        int resCount;
        List<String> resources;
        ArrayList<Integer> temp;
        ArrayList<String> anomaly;
        int inBackground = 0;
        int screenState = 0;
        int screenOrientation = 0;
        int closeToObject = 0;
        String resTimeStamp = "";
        for(int i = 0; i < names.size(); i++) {
            resources = sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.OPID_NAME + " FROM " + SqliteDBStructure.APPS_USED_RESOURCES + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) +"';");

            for(int j = 0; j < resources.size(); j++){
                resCount = sqliteDBHelper.entries("SELECT * FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) + "' " + " AND " + SqliteDBStructure.OPID_NAME + " = '" + resources.get(j) + "';");
                temp = sqliteDBHelper.query_select_to_int("SELECT " + SqliteDBStructure.RUNNING + " FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) + "' " + " AND " + SqliteDBStructure.OPID_NAME + " = '" + resources.get(j) + "';");
                if (temp != null) {
                    inBackground = temp.get(0);
                }
                temp = sqliteDBHelper.query_select_to_int("SELECT " + SqliteDBStructure.SCREEN_STATE + " FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) + "' " + " AND " + SqliteDBStructure.OPID_NAME + " = '" + resources.get(j) + "';");
                if (temp != null) {
                    screenState = temp.get(0);
                }
                temp = sqliteDBHelper.query_select_to_int("SELECT " + SqliteDBStructure.SCREEN_ORIENTATION + " FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) + "' " + " AND " + SqliteDBStructure.OPID_NAME + " = '" + resources.get(j) + "';");
                if (temp != null) {
                    screenOrientation = temp.get(0);
                }
                temp = sqliteDBHelper.query_select_to_int("SELECT " + SqliteDBStructure.CLOSE_TO_OBJECT + " FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) + "' " + " AND " + SqliteDBStructure.OPID_NAME + " = '" + resources.get(j) + "';");
                if (temp != null) {
                    closeToObject = temp.get(0);
                }
                //get resource access timeStamp
                resTimeStamp = (String) sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.TIME_STAMP + " FROM " + SqliteDBStructure.DATA_AGGREGATE + " WHERE " + SqliteDBStructure.APP_NAME + " = '" + names.get(i) +"' + " + SqliteDBStructure.OPID_NAME + " = '"+ resources.get(i) + "';").get(0);
                anomaly = RuleSet.checkForAnomaly(names.get(i), resources.get(j), resCount, inBackground, screenState, screenOrientation, closeToObject, context);
                //Send anomaly to server
                if(anomaly.get(0).equals("1")) MyClient.POST_Anomaly(names.get(i), resources.get(i), anomaly.get(1), false);
                sqliteDBHelper.insert_into_data_analyzing(names.get(i), resources.get(j), resCount, anomaly.get(0), actTimeStamp, anomaly.get(1), resTimeStamp);
            }
            sqliteDBHelper.insert_into_apps_logged_at_scan_time(names.get(i), actTimeStamp);
        }
    }

    private void sendRawData(){
        ArrayList<ArrayList<String>> rawData = new ArrayList<>();
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.APP_NAME + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.OPID_NAME + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.TIME_STAMP + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.RUNNING + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.SCREEN_STATE + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.SCREEN_ORIENTATION + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        rawData.add(sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.CLOSE_TO_OBJECT + " FROM " + SqliteDBStructure.DATA_AGGREGATE+ ";"));
        for(int i = 0; i < rawData.get(0).size(); i++){
            MyClient.POST_rawdata(rawData.get(0).get(i), rawData.get(1).get(i), rawData.get(2).get(i), rawData.get(3).get(i), rawData.get(4).get(i), rawData.get(5).get(i), rawData.get(6).get(i), actTimeStamp);
        }
    }
}