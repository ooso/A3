package com.op_dfat;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.Date;

/**
 * Created by arrigo on 11/24/16.
 */

public class SqliteDBHelper extends SQLiteOpenHelper {

    // static reference to this instance of the class
    private static SqliteDBHelper sqliteDBHelper_instance = null;
    // reference to the respective activity context
    private Context context;
    // current version of the database (any changes to the DB -> update version number)
    public static int VERSION = 27;

    // get all the data from data_aggregate and data_analyzing
    public final String QUERY_T1 = "SELECT * FROM " + SqliteDBStructure.DATA_AGGREGATE;
    public final String QUERY_T2 = "SELECT * FROM " + SqliteDBStructure.DATA_ANALYZING;


    // private constructor. DB is initialiazed through a factory method
    private SqliteDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, name, factory, version);
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_DATA_AGGREGATE);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_APPS_LOGGED);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_RESOURCES_LOGGED);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_APPS_USED_RESOURCES);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_DATA_ANALYZING);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_SCAN_TIMES_LOGGED);
        sqLiteDatabase.execSQL(SqliteDBStructure.CREATE_APPS_LOGGED_AT_SCAN_TIME);
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
        if (oldVersion != newVersion) {
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.DATA_AGGREGATE);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.DATA_ANALYZING);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.APPS_LOGGED);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.RESOURCES_LOGGED);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.APPS_USED_RESOURCES);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.SCAN_TIMES_LOGGED);
            sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + SqliteDBStructure.APPS_LOGGED_AT_SCAN_TIME);

            onCreate(sqLiteDatabase);
        }
    }

    // factory method, which initializes this class
    public static synchronized SqliteDBHelper getInstance(Context ctx) {
        // only one instance of this class can exists
        if (sqliteDBHelper_instance == null) {
            sqliteDBHelper_instance = new SqliteDBHelper(ctx.getApplicationContext(), SqliteDBStructure.DATABASE_NAME, null, VERSION);
        }
        return sqliteDBHelper_instance;
    }

    // insert data into the DB
    public void insert_into_data_aggregate(String appName, String opidName, Date _timestamp, int isRunning, int screenState, float screenOrientation, boolean closeToObject) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.APP_NAME, appName);
        contentValues.put(SqliteDBStructure.OPID_NAME, opidName);
        contentValues.put(SqliteDBStructure.TIME_STAMP, Utility.dateTime(_timestamp));
        contentValues.put(SqliteDBStructure.RUNNING, isRunning);
        contentValues.put(SqliteDBStructure.SCREEN_STATE, screenState);
        contentValues.put(SqliteDBStructure.SCREEN_ORIENTATION, screenOrientation);
        contentValues.put(SqliteDBStructure.CLOSE_TO_OBJECT, closeToObject);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.DATA_AGGREGATE, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_apps_logged (String packageName) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.APP_NAME, packageName);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.APPS_LOGGED, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_resource_logged (String opidName) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.OPID_NAME, opidName);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.RESOURCES_LOGGED, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_apps_used_resources (String appName, String opidName) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.APP_NAME, appName);
        contentValues.put(SqliteDBStructure.OPID_NAME, opidName);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.APPS_USED_RESOURCES, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_data_analyzing (String appName, String rescource, int count, String anomaly, String scanTime, String anomalyReason) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.APP_NAME, appName);
        contentValues.put(SqliteDBStructure.RESOURCE, rescource);
        contentValues.put(SqliteDBStructure.COUNT, count);
        contentValues.put(SqliteDBStructure.ANOMALY, anomaly);
        contentValues.put(SqliteDBStructure.SCAN_TIME, scanTime);
        contentValues.put(SqliteDBStructure.ANOMALY_REASON, anomalyReason);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.DATA_ANALYZING, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_scan_times_logged (Date scanTime) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.SCAN_TIME, Utility.standardDateTime(scanTime));

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.SCAN_TIMES_LOGGED, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public void insert_into_apps_logged_at_scan_time (String appName, String scanTime) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // Create a new map of values, where column names are the keys
        ContentValues contentValues = new ContentValues();

        contentValues.put(SqliteDBStructure.APP_NAME, appName);
        contentValues.put(SqliteDBStructure.SCAN_TIME, scanTime);

        db.beginTransaction();
        try {
            db.insertWithOnConflict(SqliteDBStructure.APPS_LOGGED_AT_SCAN_TIME, null, contentValues, SQLiteDatabase.CONFLICT_REPLACE);
            db.setTransactionSuccessful();
        } finally {
            db.endTransaction();
        }
    }

    public Cursor get_data(String query) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(query, null);
        return cursor;
    }

    // get all the content from data_aggregate
    public Cursor get_data_from_data_aggregate() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(QUERY_T1, null);
        return cursor;
    }

    // get all the content from data_analyzing
    public Cursor get_data_T2() {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(QUERY_T2, null);
        return cursor;
    }

    // get the amount of rows in the DB specified by a sql query
    public int entries(String query) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(query, null);
        return cursor.getCount();
    }

    //Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data.
    public void query(String query) {
        // Gets the data repository in write mode
        SQLiteDatabase db = this.getWritableDatabase();
        // insert into database
        db.beginTransaction();
        db.execSQL(query);
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    // Runs the provided SQL and returns a string over the result set:
    public String query_select_string(String query) {
        // Gets the data repository in read mode
        SQLiteDatabase db = this.getReadableDatabase();
        // select from database
        db.beginTransaction();
        Cursor cursor = db.rawQuery(query, null);
        db.setTransactionSuccessful();
        db.endTransaction();

        if (cursor != null)
            return cursorToString(cursor);
        else
            try {
                throw new SQLException();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        return null;
    }

    private String cursorToString(Cursor cursor) {
        String result = new String();

        if (cursor != null) {
            cursor.moveToFirst();
        }
        while (!cursor.isAfterLast()) {
            if (cursor.isLast())
                result += cursor.getString(0);
            else
                result += cursor.getString(0) + ", ";
            cursor.moveToNext();
        }
        return result;
    }

    // Runs the provided SQL and returns an array list:
    // DO NOT CALL THIS METHOD, IF YOU MAKE A SELECT ON MULTIPLE COLUMNS
    public ArrayList query_select_list(String query) {
        // Gets the data repository in read mode
        SQLiteDatabase db = this.getReadableDatabase();
        // select from database
        db.beginTransaction();
        Cursor cursor = db.rawQuery(query, null);
        db.setTransactionSuccessful();
        db.endTransaction();

        if (cursor != null)
            return cursorToList(cursor);
        else
            try {
                throw new SQLException();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        return null;
    }

    // only use when executing a query on
    public ArrayList query_select_to_int(String query) {
        // Gets the data repository in read mode
        SQLiteDatabase db = this.getReadableDatabase();
        // select from database
        db.beginTransaction();
        Cursor cursor = db.rawQuery(query, null);
        db.setTransactionSuccessful();
        db.endTransaction();

        if (cursor != null)
            return cursorToInt(cursor);
        else
            try {
                throw new SQLException();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        return null;
    }

    private ArrayList cursorToInt(Cursor cursor) {
        ArrayList result = new ArrayList();

        if (cursor != null) {
            cursor.moveToFirst();
        }
        while (!cursor.isAfterLast()) {
            result.add(cursor.getInt(0));
            cursor.moveToNext();
        }

        return result;
    }

    private ArrayList cursorToList(Cursor cursor) {
        ArrayList result = new ArrayList();

        if (cursor != null) {
            cursor.moveToFirst();
        }
        while (!cursor.isAfterLast()) {
            result.add(cursor.getString(0));
            cursor.moveToNext();
        }

        return result;
    }

    public void deleteRawDataTables () {
        query("DELETE FROM " + SqliteDBStructure.DATA_AGGREGATE);
        query("DELETE FROM " + SqliteDBStructure.APPS_LOGGED);
        query("DELETE FROM " + SqliteDBStructure.APPS_USED_RESOURCES);
    }
}