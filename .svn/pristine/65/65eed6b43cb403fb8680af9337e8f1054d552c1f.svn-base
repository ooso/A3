package com.op_dfat;

import android.app.Notification;
import android.app.ProgressDialog;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.IBinder;
import android.os.PowerManager;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import java.util.Date;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class MyService extends Service {
    // binder that is given to the clients, who wish to bind to this service
    private final IBinder mBinder = new LocalBinder();
    // stores the start time of the most recent scan
    public static long start_scan_time_ms;
    // stores the stop time of the most recent scan
    public long stop_scan_time_ms;
    // tags
    public static final String SERVICE_WAKELOCK = "com.op_dfat.MyService.ServiceWakelock";
    public static final String START_SCAN = "com.op_dfat.MyService.StartScan";
    public static final String STOP_SCAN = "com.op_dfat.MyService.StopScan";
    public static final String SCAN_STOPPED = "com.op_dfat.MyService.ScanStopped";
    public static final String STOP_SCAN_TIME_STRING = "com.op_dfat.MyService.StopScanTimeString";

    // scheduled thread pool executor, which handles tasks and threads
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = null;
    // futures, which store information about the scheduled tasks
    private ScheduledFuture<?> scan_future, check_motion_future;

    // variable, which checks whether we are currently analyzing
    public boolean scanning = false;

    // references the all the necessary instances
    private PermissionLogReader permissionLogReader;
    private MotionSensors motionSensors;
    private Datamining datamining;
    private Evaluation evaluation;
    private NotificationHandler notificationHandler;

    // references for the wakelock
    private PowerManager.WakeLock wakeLock;

    public class LocalBinder extends Binder
    {
        MyService getService() {
            // Return this instance of LocalService so clients can call public methods
            return MyService.this;
        }
    }

    private Runnable read_permission_log = new Runnable()
    {
        @Override
        public void run() {
            try {
                // read the permission log
                permissionLogReader.readPermissionLog();
            } catch (RuntimeException e) {
                e.printStackTrace();
            }
        }
    };

    private Runnable start_motion_future_sensors = new Runnable() {
        @Override
        public void run() {
            // start the motion sensor and register the class
            motionSensors.startCheckingSensors(getApplicationContext());
            motionSensors.registerReceiver(getApplicationContext());
        }
    };

    private Runnable stop_check_motion_future = new Runnable() {
        @Override
        public void run() {
            // stop the motion senor tracking and unregister the class
            motionSensors.stopCheckingMotionSensors();
            motionSensors.unregisterReceiver(getApplicationContext());
        }
    };

    private class DataMiningAsyncTask extends AsyncTask<Void, Void, Void> {

        @Override
        protected Void doInBackground(Void... voids) {
            datamining.startAnalysis(start_scan_time_ms, stop_scan_time_ms);
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            OnDataminingFinished();
        }

    }

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public void onCreate ()
    {
        super.onCreate ();
        // get references to all necessary instances
        permissionLogReader = PermissionLogReader.getInstance(getApplicationContext());
        motionSensors = MotionSensors.getInstance(getApplicationContext());
        datamining = Datamining.getInstance(getApplicationContext());
        evaluation = Evaluation.getInstance(getApplicationContext());
        notificationHandler = NotificationHandler.getInstance(getApplicationContext());

        // get a reference to the power manager
        PowerManager powerManager = (PowerManager)getSystemService(Context.POWER_SERVICE);

        // instantiate the thread pool executor, which handles the threads
        if (scheduledThreadPoolExecutor == null)
            scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
        // set policies on task termination
        scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);
        scheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);

        // setup a wakelock
        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, SERVICE_WAKELOCK);
    }

    @Override
    public void onDestroy ()
    {
        Log.d("MYSERVICE", "Service stopped");
        // shutdown all the running tasks
        shutdownRunningTasks();
        // shutdown the thread pool executor
        if (scheduledThreadPoolExecutor != null) {
            scheduledThreadPoolExecutor.shutdown();
        }
        super.onDestroy ();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // when service is started, send the information whether the service is currently analyzing
        if (intent != null) {
            if (intent.getAction().equals(START_SCAN)) {
                // set the new scan start of this scan period
                start_scan_time_ms = System.currentTimeMillis();
                // the service should be in foreground so it won't be killed so easily
                startForeground(NotificationHandler.NOTFICATION_ID, notificationHandler.buildScanNotification(start_scan_time_ms));
                // setup an wakeup alarm to wake the app up at a given time or default after x days
                AlarmReceiver.setupWakeUpAlarm(getApplicationContext(), start_scan_time_ms, ScanSettings.scanDurationsInMS[ScanSettings.indexScanDuration]);
                // start the anaylzing process
                startAnalyzing();
                Log.d("MYSERVICE", "Scan started");
            } else if (intent.getAction().equals(STOP_SCAN)) {
                // set the stop time
                stop_scan_time_ms = System.currentTimeMillis();
                // send an intent to the receiver which stops any ongoing alarm setups
                sendCancelAlarm();
                // show a notificcation to the user
                notificationHandler.showScanStoppedNotification(stop_scan_time_ms);
                // stop the analyzing process
                stopAnalyzing();
                Log.d("MYSERVICE", "Scan stopped");
            }
        }
        // redeliver the latest intent, when the service has been terminated
        return START_STICKY;
    }

    public void startAnalyzing () {
        // if we are not currently analyzing ...
        if (!scanning) {
            // aquire the wakelock as soon as the scan has been started
            if (wakeLock != null)
                wakeLock.acquire();
            // start all necessary tasks
            startTasks();
            // set the new scan state to analyzing = true
            scanning = true;
            // send the current scan state to the main activity
            adjustFragmet_analyze();
        }
    }

    public void stopAnalyzing () {
        // if we are currently scanning ...
        if (scanning) {
            // ...stop all currently running tasks
            shutdownRunningTasks();
            // wait until the receiver in the main activity has been registered
            waitForRegisterReceiver();
            // send a broadcast to the main activity that the scan has been stopped
            sendScanStopped ();
            // start the datamining process
            dataMiningProcess();
        }
    }

    private void startTasks() {
        // set the scan start in the permission log reader
        permissionLogReader.setStartScanTime(start_scan_time_ms);
        // start the motion sensor
        if (scheduledThreadPoolExecutor != null) {
            check_motion_future = scheduledThreadPoolExecutor.schedule(start_motion_future_sensors, 0, TimeUnit.MILLISECONDS);
        }
        // schedule the scan task at a fixed repeat rate
        if (scheduledThreadPoolExecutor != null) {
            long scanInterval = ScanSettings.scanIntervalInMS[ScanSettings.indexScanInterval];
            scan_future = scheduledThreadPoolExecutor.scheduleAtFixedRate(read_permission_log, 0, scanInterval, TimeUnit.SECONDS);
        }
    }

    private void shutdownRunningTasks() {
        // cancel all currently running tasks
        if (scan_future != null) {
            scan_future.cancel(false);
        }
        if (check_motion_future != null) {
            check_motion_future.cancel(false);
            scheduledThreadPoolExecutor.schedule(stop_check_motion_future, 0, TimeUnit.MILLISECONDS);
        }
    }

    private void dataMiningProcess () {
        // start the data mining process in another thread
        new DataMiningAsyncTask().execute();
    }

    private void waitForRegisterReceiver () {
        // wait passively until the receiver in the main activity is registered
        while (!MainActivity.registered) {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void OnDataminingFinished () {
        Log.d("MYSERVICE", "Datamining finished");
        // reset raw data tables and found sample count
        reset();
        // set the new scan state to analyzing = false
        scanning = false;
        // send the current scan state to the main activity
        adjustFragmet_analyze();
        // send a broadcast to inform the main activity that the data mining has been finished
        sendDataminingFinished();
        // release the wakelock when the scan has been stopped
        if (wakeLock != null)
            wakeLock.release();
        // stop the service
        stopForeground(false);
        //stopSelf();
    }

    private void reset () {
        // reset the found samplecount
        evaluation.resetSampleCounts();
        // delete the raw data table
        SqliteDBHelper.getInstance(getApplicationContext()).deleteRawDataTables();
    }

    private void adjustFragmet_analyze () {
        // send a broadcast about the current analysis state, which will be received by the broadcast receiver in the main activity
        Intent intent = new Intent();
        intent.setAction(MainActivity.SCAN_STATE);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }

    private void sendCancelAlarm () {
        // send a broadcast about the current analysis state, which will be received by the alarm receiver
        Intent intent = new Intent();
        intent.setAction(AlarmReceiver.CANCEL_ALARM);
        sendBroadcast(intent);
    }

    private void sendDataminingFinished () {
        // send a braodcast to inform the main activity that the datamining has been finished
        Intent intent = new Intent();
        intent.setAction(MainActivity.DATA_MINING_FINISHED);
        //intent.putExtra(STOP_SCAN_TIME_STRING, Utility.standardDateTime(new Date(stop_scan_time_ms)));
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }

    private void sendScanStopped () {
        Intent intent = new Intent();
        intent.setAction(SCAN_STOPPED);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }
}
