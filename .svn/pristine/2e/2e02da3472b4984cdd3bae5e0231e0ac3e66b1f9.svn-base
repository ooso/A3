package com.op_dfat;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;
import android.os.PowerManager;
import android.util.Log;

import java.util.Date;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class MyService extends Service {
    // binder that is given to the clients, who wish to bind to this service
    private final IBinder mBinder = new LocalBinder();

    // repeat rate: every 5 seconds
    public static final long REPEAT_TIME = 5;
    // stores the start time of the most recent scan
    private long start_scan_time_ms;
    // tags
    public static final String SERVICE_WAKELOCK = "com.op_dfat.MyService.ServiceWakelock";
    public static final String START_SCAN = "com.op_dfat.MyService.StartScan";
    public static final String STOP_SCAN = "com.op_dfat.MyService.StopScan";

    // scheduled thread pool executor, which handles tasks and threads
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = null;
    // futures, which store information about the scheduled tasks
    ScheduledFuture<?> scan_future, check_motion_future;

    // variable, which checks whether we are currently analyzing
    public boolean analyzing = false;

    // references the all the necessary instances
    private SqliteDBHelper sqliteDB;
    private UsageManager usageManager;
    private PermissionLogReader permissionLogReader;
    private MotionSensors motionSensors;
    private PowerManager powerManager;
    private PowerManager.WakeLock wakeLock;

    public class LocalBinder extends Binder
    {
        MyService getService() {
            // Return this instance of LocalService so clients can call public methods
            return MyService.this;
        }
    }

    public Runnable logReader = new Runnable()
    {
        @Override
        public void run() {
            try {
                // read the permission log
                permissionLogReader.readPermissionLogReader(usageManager, sqliteDB, start_scan_time_ms);
            } catch (RuntimeException e) {
                e.printStackTrace();
            }
        }
    };

    public Runnable check_motion_future_sensors = new Runnable() {
        @Override
        public void run() {
            // start the motion sensor
            motionSensors.startCheckingSensors(getApplicationContext());
            motionSensors.registerReceiver(getApplicationContext());
        }
    };

    public Runnable stop_check_motion_future = new Runnable() {
        @Override
        public void run() {
            motionSensors.stopCheckingMotionSensors();
            motionSensors.unregisterReceiver(getApplicationContext());
        }
    };

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }


    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        // when service is started, send the information whether the service is currently analyzing
        if (intent != null) {
            if (intent.getAction() == START_SCAN) {
                Log.d("MYSERVICE", "Service started");
                long startScanTime = intent.getLongExtra("startScanTime", System.currentTimeMillis());
                startAnalyzing(startScanTime);
            } else if (intent.getAction() == STOP_SCAN) {
                stopAnalyzing();
            }
        }
        // send the current analyzing state to the main activity
        sendAnalyzingState();
        return START_REDELIVER_INTENT;
    }


    @Override
    public void onCreate ()
    {
        super.onCreate ();
        // get references to all necessary instances
        sqliteDB = SqliteDBHelper.getInstance(getApplicationContext());
        usageManager = UsageManager.getInstance(getApplicationContext(), null);
        permissionLogReader = PermissionLogReader.getInstance(getApplicationContext());
        motionSensors = MotionSensors.getInstance(getApplicationContext());
        powerManager = (PowerManager)getSystemService(Context.POWER_SERVICE);

        // instantiate the thread pool executor, which handles the threads
        if (scheduledThreadPoolExecutor == null)
            scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
        // set policies on task termination
        scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);
        scheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);

        // setup a wakelock
        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, SERVICE_WAKELOCK);
    }

    @Override
    public void onDestroy ()
    {
        Log.d("MYSERVICE", "Service stopped");
        // shutdown all the running tasks
        shutdownRunningTasks();
        // shutdown the thread pool executor
        if (scheduledThreadPoolExecutor != null) {
            scheduledThreadPoolExecutor.shutdown();
        }

        super.onDestroy ();
    }

    public void startAnalyzing (long _start_scan_time_ms) {
        // if we are not currently analyzing ...
        if (!analyzing) {
            // aquire the wakelock as soon as the scan has been started
            if (wakeLock != null)
                wakeLock.acquire();
            // set the new scan start of this scan period
            start_scan_time_ms = _start_scan_time_ms;
            // start all necessary tasks
            startTasks();
            // set the new scan state to analyzing = true
            analyzing = true;
            // send the current scan state as a broadcast
            sendAnalyzingState();
        }
    }

    public void stopAnalyzing () {
        // if we are currently analyzing ...
        if (analyzing) {
            // ...stop all currently running tasks
            shutdownRunningTasks();
            // send an intent to the receiver which stops any ongoing alarm setups
            sendCancelAlarm();
            // set the new scan state to analyzing = false
            analyzing = false;
            // send the current scan state as a broadcast
            sendAnalyzingState();
            // release the wakelock when the scan has been stopped
            if (wakeLock != null)
                wakeLock.release();
            // stop the service
            stopSelf();
        }
    }

    private void startTasks() {
        // start the motion sensor
        if (scheduledThreadPoolExecutor != null) {
            check_motion_future = scheduledThreadPoolExecutor.schedule(check_motion_future_sensors, 0, TimeUnit.MILLISECONDS);
        }
        // schedule the scan task at a fixed repeat rate
        if (scheduledThreadPoolExecutor != null) {
            scan_future = scheduledThreadPoolExecutor.scheduleAtFixedRate(logReader, 0, REPEAT_TIME, TimeUnit.SECONDS);
        }
        Log.d("MYSERVICE", "Scan started");
    }

    private void shutdownRunningTasks() {
        // cancel all currently running tasks
        if (scan_future != null) {
            scan_future.cancel(true);
        }
        if (check_motion_future != null) {
            check_motion_future.cancel(false);
            scheduledThreadPoolExecutor.schedule(stop_check_motion_future, 0, TimeUnit.MILLISECONDS);
        }
        Log.d("MYSERVICE", "Scan stopped");
    }

    public void sendAnalyzingState () {
        // send a broadcast about the current analysis state, which will be received by the broadcast receiver in the main activity
        Intent intent = new Intent();
        intent.setAction(MainActivity.ANALYZING);
        intent.putExtra("analyzing", analyzing);
        sendBroadcast(intent);
    }

    public void sendCancelAlarm () {
        // send a broadcast about the current analysis state, which will be received by the broadcast receiver in the main activity
        Intent intent = new Intent();
        intent.setAction(MainActivity.CANCEL_ALARM);
        sendBroadcast(intent);
    }
}
