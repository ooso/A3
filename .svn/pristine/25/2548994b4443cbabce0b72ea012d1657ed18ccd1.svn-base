package com.op_dfat;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static android.content.ContentValues.TAG;
import static android.graphics.Color.BLACK;
import static android.graphics.Color.RED;

public class Adapter_Apps extends ArrayAdapter<Apps> implements Filterable {

    Context context;
    private int layoutResourceId;
    private List<Apps> data;
    private List<Apps> filtered = new ArrayList<>();
    String timestamp;

    FilterNames filter;

    public Adapter_Apps(Context context, int layoutResourceId, List<Apps> data){
        super(context, layoutResourceId, data);
        this.context = context;
        this.layoutResourceId = layoutResourceId;
        this.data = data;
        this.filtered = this.data;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        View rowView = convertView;
        ViewHolder viewHolder;

        if (rowView == null) {
            LayoutInflater inflater = (LayoutInflater) context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            rowView = inflater.inflate(R.layout.adapter_apps, parent, false);

            viewHolder = new ViewHolder();

            viewHolder.ivIcon = (ImageView) rowView.findViewById(R.id.appIcon);
            viewHolder.tvName = (TextView) rowView.findViewById(R.id.appName);
            //viewHolder.tvCount = (TextView) rowView.findViewById(R.id.appCount);
            //viewHolder.tvResource= (TextView) rowView.findViewById(R.id.appResource);
            viewHolder.ivAnomalyIcon = (ImageView) rowView.findViewById(R.id.appAnomalyIcon);
            viewHolder.anomalyIcon = getContext().getDrawable(R.drawable.anomalyicon);

            rowView.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) rowView.getTag();
        }

        Apps app = getItem(position);
        // change the icon, appName, resource count and resource name
        timestamp = app.timestamp;
        viewHolder.ivIcon.setImageDrawable(app.icon);
        viewHolder.tvName.setText(app.appName);
        //viewHolder.tvCount.setText(app.count + "x");
        //viewHolder.tvResource.setText(app.resource);
        viewHolder.tvName.setTextColor(BLACK);
        viewHolder.ivAnomalyIcon.setImageDrawable(null);

        // sets a warning icon when a anomaly is thrown for the app
        if(app.anomalyFound == 1){
            viewHolder.tvName.setTextColor(RED);
            viewHolder.ivAnomalyIcon.setImageDrawable(viewHolder.anomalyIcon);
        }
        return rowView;
    }

    @Override
    public int getCount() {
        return filtered.size();
    }

    @Nullable
    @Override
    public Apps getItem(int position) {
        return filtered.get(position);
    }


    @NonNull
    @Override
    public Filter getFilter() {
        if (filter == null) {
            filter = new FilterNames();
        }
        return filter;
    }

    private class FilterNames extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence charSequence) {

            FilterResults results = new FilterResults();

            if (charSequence != null && charSequence.length() != 0) {
                List<Apps> resultList = new ArrayList<>();
                for (Apps app: data) {
                    if (app.appName.toLowerCase().contains(charSequence.toString().toLowerCase())) {
                        resultList.add(app);
                    }
                }

                results.count = resultList.size();
                results.values = resultList;
            } else {
                results.count = data.size();
                results.values = data;
            }
            return results;
        }

        @Override
        protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
            filtered = (List<Apps>) filterResults.values;

            notifyDataSetChanged();
        }
    }

    private static class ViewHolder {
        ImageView ivIcon;
        TextView tvName;
        TextView tvCount;
        TextView tvResource;
        ImageView ivAnomalyIcon ;
        Drawable anomalyIcon;
    }
}
