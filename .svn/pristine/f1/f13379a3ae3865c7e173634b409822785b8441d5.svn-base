package com.op_dfat;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.drawable.Drawable;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

import static android.graphics.Color.RED;
import static com.op_dfat.SqliteDBHelper.APPNAME;
import static com.op_dfat.SqliteDBHelper.COUNT;
import static com.op_dfat.SqliteDBHelper.RESOURCE;
import static com.op_dfat.SqliteDBHelper.TABLE_NAME_2;
import static com.op_dfat.SqliteDBHelper.TIME_STAMP;
import static java.lang.Integer.parseInt;

public class Activity_apps extends AppCompatActivity {

    ListView listView;
    SearchView sv;
    android.widget.Filter filter;
    String timestamp;
    ArrayList<String> tmp = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_apps);
        Intent intent = getIntent();
        timestamp = intent.getStringExtra("timestamp");
        //Log.d("TAG", "onCreate: timestamp: "+timestamp);
        createList();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_options, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    private void createList(){


        SqliteDBHelper db = SqliteDBHelper.getInstance(this);
        sv = (SearchView) findViewById(R.id.searchViewApps);
        listView = (ListView) findViewById(R.id.listViewApps);
        int listSize = getAppNames().size();
        final Apps app_data[] = new Apps[listSize];
        ArrayList<String> appNames = getAppNames();


        // executes the SQL statements to get data for the list of apps
        for(int i = 0; i < listSize; i++){
            // timestamp that we are filtering the apps by

            String appName = getAppNames().get(i);
            if(checkForAnomaly(appName)){
                TextView tv = (TextView) findViewById(R.id.appName);
                tv.setHintTextColor(RED);
                tv.setTextColor(RED);
            }
            Drawable icon = Utility.getAppIcon(this, appName);
            if (icon == null) {
                icon = getResources().getDrawable(R.drawable.boo, null);
            }

            //Drawable icon = getResources().getDrawable(R.drawable.boo, null);
            String resource = getHighestResourceForAppName(appName);
            String count = getCountForHighestResource(appName, resource);

            app_data[i] = new Apps(icon, Utility.packageToAppName(this, appNames.get(i)), appNames.get(i), count, resource);
        }

        Adapter_Apps adapter = new Adapter_Apps(getApplicationContext(), R.id.activity_apps, app_data );

        // Assign adapter to ListView
        listView.setAdapter(adapter);

        // disables the default TextFilter
        listView.setTextFilterEnabled(false);
        // gets filter for the adapter
        filter = adapter.getFilter();
        // sets up the searchView
        setupSearchView();

        // ListView Item Click Listener
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                    String appName = app_data[position].appName;
                    String packageName = app_data[position].packageName;

                    Intent intent = new Intent(getApplicationContext(), Activity_app_details.class);
                    intent.putExtra("packageName", packageName);
                    intent.putExtra("appName", appName);
                    intent.putExtra("timestamp", timestamp);
                    startActivity(intent);
            }
        });
    }

    //Return aller App Namen, die zum Analysezeitpunt "timeStamp" in der DB stehen
    private ArrayList<String> getAppNames(){
        return SqliteDBHelper.getInstance(this).query_select_list("SELECT DISTINCT app_name FROM data_analysis WHERE last_used = '" + timestamp + "'");
    }

    private String getHighestResourceForAppName(String appName){
        tmp = SqliteDBHelper.getInstance(this).query_select_list("SELECT resource FROM data_analysis WHERE last_used = '" + timestamp + "' AND app_name = '" + appName + "' ORDER BY count");
        if(!tmp.isEmpty()){
            return tmp.get(0);
        }else{
            return null;
        }
    }

    private String getCountForHighestResource(String appName, String resource){
        tmp = SqliteDBHelper.getInstance(this).query_select_list("SELECT count FROM data_analysis WHERE last_used = '" + timestamp + "' AND app_name = '" + appName + "' AND resource = '" + resource + "'");
        if(!tmp.isEmpty()){
            return tmp.get(0);
        }else{
            return null;
        }
    }

    private boolean checkForAnomaly(String appName){
        tmp = SqliteDBHelper.getInstance(this).query_select_list("SELECT anomaly FROM data_analysis WHERE last_used = '" + timestamp + "' AND app_name = '" + appName + "'");
        if(tmp.contains("1")){
            return true;
        }else{
            return false;
        }
    }

    // Sets up the SearchView
    private void setupSearchView(){
        sv.setIconifiedByDefault(false);
        sv.setOnQueryTextListener(
                new SearchView.OnQueryTextListener(){

                    @Override
                    public boolean onQueryTextSubmit(String query) {

                        return false;
                    }

                    @Override
                    public boolean onQueryTextChange(String newText) {

                        // filter.filter(newText);
                        return false;
                    }
                }
        );
        sv.setSubmitButtonEnabled(false);
        sv.setQueryHint("Search Here");
    }

    public void settingsButton(MenuItem item) {
        Intent intent = new Intent(getApplicationContext(), SettingsPage.class);
        startActivity(intent);
    }

    public void getHelp(MenuItem item){

    }

    public void getAboutUs(MenuItem item){

    }
}
