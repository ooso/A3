package com.dfat.fakerinc.guidummy;

import android.app.Activity;
import android.app.AppOpsManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Binder;
import android.os.Environment;
import android.os.IBinder;;
import android.support.v4.app.ActivityCompat;
import android.util.Log;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class MyService extends Service {
    // repeat rate: every 5 seconds
    private static final long REPEAT_TIME = 5;
    // binder that is given to the clients, who wish to bind to this service
    private final IBinder mBinder = new LocalBinder();
    ;
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = null;
    ScheduledFuture<?> periodicFuture;
    public boolean analyzing;

    private SqliteDBHelper sqliteDB;
    private UsageManager usageManager;
    private PermissionLogReader permissionLogReader;

    public class LocalBinder extends Binder
    {
        MyService getService() {
            // Return this instance of LocalService so clients can call public methods
            return MyService.this;
        }
    }

    public Runnable logReader = new Runnable()
    {
        @Override
        public void run() {
            try {
                permissionLogReader.readPermissionLogReader(usageManager, sqliteDB);
            } catch (RuntimeException e) {
                e.printStackTrace();
            }
        }
    };

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }


    @Override
    public void onCreate ()
    {
        super.onCreate ();
        sqliteDB = SqliteDBHelper.getInstance(getApplicationContext());
        usageManager = UsageManager.getInstance(getApplicationContext(), null);
        permissionLogReader = PermissionLogReader.getInstance(getApplicationContext());

        if (scheduledThreadPoolExecutor == null)
            scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);;
        scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);
    }

    @Override
    public void onDestroy ()
    {
        super.onDestroy ();
        saveBeforeClose();
    }


    public void startAnalyzing () {
        if (!analyzing) {
            if (scheduledThreadPoolExecutor != null) {
                periodicFuture = scheduledThreadPoolExecutor.scheduleAtFixedRate(logReader, 0, REPEAT_TIME, TimeUnit.SECONDS);
            }
            analyzing = true;
        }
    }

    public void stopAnalyzing () {
        if (analyzing) {
            if (!periodicFuture.isCancelled())
                periodicFuture.cancel(true);
            else
                periodicFuture.cancel(false);
            if (periodicFuture.isDone())
                Log.d("Thread", "Canceled Task");
            analyzing = false;
        }
    }

    private void saveBeforeClose() {
        if (periodicFuture != null)
            periodicFuture.cancel(true);
        if (scheduledThreadPoolExecutor != null)
            scheduledThreadPoolExecutor.shutdown();
        writeDBtoFile();
        Log.d("MYSERVICE", "Service stopped");
    }

    // ask permission to write to storage
    public void DBtoFile(Activity activity) {
        // "formulate", which permissions are required
        String[] permissionStorage = {android.Manifest.permission.READ_EXTERNAL_STORAGE, android.Manifest.permission.WRITE_EXTERNAL_STORAGE};
        // check, if permissions are granted
        int permission = ActivityCompat.checkSelfPermission(activity, android.Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (permission != PackageManager.PERMISSION_GRANTED) {
            // if permissions are denied, notify user to grant required permissions
            ActivityCompat.requestPermissions(activity, permissionStorage, 1);
        } else {
            // if permissions are granted, write DB content to text file
            // sqlHelper.DBtoText();
            writeDBtoFile();
        }

    }

    public void writeDBtoFile() {
        JSONArray resultSet = new JSONArray();
        String resultString = null;
        Cursor cursor = sqliteDB.get_data();
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {

            int totalColumn = cursor.getColumnCount();
            JSONObject rowObject = new JSONObject();

            for (int i = 0; i < totalColumn; i++) {
                if (cursor.getColumnName(i) != null) {
                    try {
                        if (cursor.getString(i) != null) {
                            rowObject.put(cursor.getColumnName(i), cursor.getString(i));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            try {
                resultSet.put(rowObject);

            } catch (Exception e) {
                e.printStackTrace();
            }
            cursor.moveToNext();
        }
        cursor.close();

        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonParser jp = new JsonParser();
        try {
            JsonElement je = jp.parse(resultSet.toString(4));
            resultString = gson.toJson(je);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            File dir = new File(Environment.getExternalStorageDirectory().getAbsolutePath());
            if (!dir.exists())
                dir.mkdir();
            FileWriter file = new FileWriter(dir+ "/DFAT_File.txt");
            file.write(resultString);
            file.flush();
            file.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        File file= new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/DFAT_File.txt");
        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        intent.setData(Uri.fromFile(file));
        sendBroadcast(intent);
    }
}
