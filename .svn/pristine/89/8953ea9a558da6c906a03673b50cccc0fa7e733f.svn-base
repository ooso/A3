package com.op_dfat;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.InputType;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import java.util.ArrayList;

import io.github.douglasjunior.androidSimpleTooltip.SimpleTooltip;

public class Activity_app_details extends AppCompatActivity {

    ListView listView;
    String appName;
    String packageName;
    String timestamp;
    ArrayList<String> tmp = new ArrayList<>();

    SqliteDBHelper sqliteDBHelper;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_app_details);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        sqliteDBHelper = SqliteDBHelper.getInstance(this);

        Intent intent = getIntent();
        appName = intent.getStringExtra("appName");
        packageName = intent.getStringExtra("packageName");
        timestamp = intent.getStringExtra("timestamp");
        createList();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_options, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void createList(){

        ImageView iv = (ImageView) findViewById(R.id.appDetailIcon);
        Drawable icon = Utility.getAppIcon(getApplicationContext(), packageName);
        if (icon == null) {
            icon = getResources().getDrawable(R.mipmap.ic_launcher, null);
        }
        iv.setImageDrawable(icon);

        TextView tv = (TextView) findViewById(R.id.appDetailName);
        tv.setText(appName);

        listView = (ListView) findViewById(R.id.listViewResources);

        ArrayList<String> resourceNames = getResourceListByAppName(packageName);
        ArrayList[] comp = getResourceAndCount(packageName);

        final int listSize = resourceNames.size();
        final Resources[] resources = new Resources[listSize];
        boolean anomalous = false;

        for (int i = 0; i < comp[0].size(); i++) {
            if(resourceIsAnomaly(packageName, (String)comp[0].get(i))){
                anomalous = true;
            }
            resources[i] = new Resources((String)comp[1].get(i), (String)comp[0].get(i), anomalous);
            anomalous = false;
        }

        final Adapter_App_Details adapter = new Adapter_App_Details(getApplicationContext(), R.id.activity_app_details, resources);

        // Assign adapter to ListView
        listView.setAdapter(adapter);

        // ListView Item Click Listener
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {

                String msg;

                AlertDialog alertDialog = new AlertDialog.Builder(Activity_app_details.this).create();

                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "Cancel",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });

                // sets up the dialog and onClick action when the resource is anomalous
                if(resources[position].anomalous) {
                    msg = getAnomalyText(packageName, resources[position].resource);
                    new SimpleTooltip.Builder(getApplicationContext())
                            .anchorView(view)
                            .text(msg)
                            .gravity(Gravity.BOTTOM)
                            .animated(false)
                            .transparentOverlay(true)
                            .backgroundColor(Color.argb(250, 51, 153, 255))
                            .arrowColor(Color.argb(250, 51, 153, 255))
                            .textColor(Color.WHITE)
                            .build()
                            .show();
                }
                // sets up the dialog and onClick action when the resource is not anomalous
                else{
                    alertDialog.setTitle(R.string.nonAnomalousResourceExplanationTitle);
                    msg = getString(R.string.nonAnomalousStandardText);
                    alertDialog.setMessage(msg);

                    // text input for the explanation from the user why he reported this resource
                    final EditText input = new EditText(Activity_app_details.this);
                    input.setInputType(InputType.TYPE_CLASS_TEXT);

                    alertDialog.setView(input);
                    alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Report",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            String reasonForReporting = input.getText().toString();
                            MyClient.POST_Anomaly(packageName, resources[position].resource, reasonForReporting, true);
                        }
                    });
                    alertDialog.show();
                }
            }
        });
    }

    private ArrayList<String> getResourceListByAppName(String packageName){
        return sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.RESOURCE + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + packageName + "' ORDER BY " + SqliteDBStructure.RESOURCE);
    }

    private ArrayList<String> getCountListByAppName(String packageName){
        return sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.COUNT + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + packageName + "' ORDER BY " + SqliteDBStructure.RESOURCE);
    }

    private ArrayList[] getResourceAndCount(String packageName) {
        Cursor cursor = sqliteDBHelper.get_data("SELECT " + SqliteDBStructure.RESOURCE + ", " + SqliteDBStructure.COUNT + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + packageName + "' ORDER BY " + SqliteDBStructure.COUNT + " DESC");

        ArrayList<String> count = new ArrayList<>();
        ArrayList<String> resource = new ArrayList<>();
        ArrayList[] comp = new ArrayList[2];

        if (cursor != null) {
            cursor.moveToFirst();

            while (!cursor.isAfterLast()) {
                resource.add(cursor.getString(0));
                count.add(""+cursor.getInt(1));
                cursor.moveToNext();
            }
        }
        comp[0] = resource;
        comp[1] = count;
        return comp;
    }

    private ArrayList<String> getAnomalyResources(String packageName){
        return sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.RESOURCE + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + packageName + "' AND " + SqliteDBStructure.ANOMALY + " = 1");
    }

    public void settingsButton(MenuItem item) {
        Intent intent = new Intent(getApplicationContext(), SettingsPage.class);
        startActivity(intent);
    }

    private boolean resourceIsAnomaly(String app, String res){
        tmp = sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.ANOMALY + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + app + "' AND " + SqliteDBStructure.RESOURCE + " = '"+res+"'");
        return tmp.contains("1");
    }

    private String getAnomalyText(String app, String res){
        tmp = sqliteDBHelper.query_select_list("SELECT " + SqliteDBStructure.ANOMALY_REASON + " FROM " + SqliteDBStructure.DATA_ANALYZING + " WHERE " + SqliteDBStructure.SCAN_TIME + " = '" + timestamp + "' AND " + SqliteDBStructure.APP_NAME + " = '" + app + "' AND " + SqliteDBStructure.RESOURCE + " = '"+res+"'");
        return tmp.get(0);
    }


    public void getHelp(MenuItem item){

    }

    public void getAboutUs(MenuItem item){

    }

}
