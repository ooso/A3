package com.op_dfat;

import android.Manifest;
import android.app.Notification;
import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.design.widget.TabLayout;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import java.util.Date;
import java.util.List;

/**
 * adb shell pm grant com.op_dfat android.permission.GET_APP_OPS_STATS
 * adb.exe -d shell pm grant com.op_dfat android.permission.GET_APP_OPS_STATS
 */

public class MainActivity extends AppCompatActivity implements Fragment_new.OnFragmentInteractionListener, Fragment_old.OnFragmentInteractionListener, Fragment_blacklist.OnFragmentInteractionListener, Fragment_old_apps.OnFragmentInteractionListener {

    /**
     * The {@link android.support.v4.view.PagerAdapter} that will provide
     * fragments for each of the sections. We use a
     * {@link FragmentPagerAdapter} derivative, which will keep every
     * loaded fragment in memory. If this becomes too memory intensive, it
     * may be best to switch to a
     * {@link android.support.v4.app.FragmentStatePagerAdapter}.
     */
    private SectionsPagerAdapter mSectionsPagerAdapter;

    /**
     * The {@link ViewPager} that will host the section contents.
     */
    private ViewPager mViewPager;
    private TabLayout tabLayout;

    // reference to the background service
    public MyService mService;
    // is the service bound to this activity
    boolean isBound = false;
    // reference to the custom UsageManager
    public UsageManager usageManager;
    // identifier for the intent service extras
    public static final String IDENTIFIER = "com.op_dfat.MainActivity";
    // identifier for the broadcast receiver
    public static final String ANALYZING = "com.op_dfat.MainActivity.Analizing";
    // Date when analysis has been started
    private Date analysis_start;
    // is app analyzing
    public static boolean analyzing;
    // Receiver instance
    private MyReceiver mReceiver;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // get the reference to the instance of the UsageManager class
        usageManager = UsageManager.getInstance(getApplicationContext(), this);
        // bind this activity to the background service
        bindBackgroundService();
        // register receiver
        registerReceiver();

        // create instance of date object
        analysis_start = new Date();

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle("DFAT");
        setSupportActionBar(toolbar);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

        // Set up the ViewPager with the sections adapter.
        mViewPager = (ViewPager) findViewById(R.id.container);
        mViewPager.setAdapter(mSectionsPagerAdapter);

        tabLayout = (TabLayout) findViewById(R.id.tabview);
        tabLayout.setupWithViewPager(mViewPager);

        TabLayout.OnTabSelectedListener onTabSelectedListener = new TabLayout.OnTabSelectedListener() {

            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                mViewPager.setCurrentItem(tab.getPosition());
                FragmentManager man = getSupportFragmentManager();
                List<Fragment> list = man.getFragments();
                if (list.size() > 0) {
                    Fragment_old fOld = (Fragment_old) list.get(1);
                    fOld.getScanList();
                }
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {
                mViewPager.setCurrentItem(tab.getPosition());
            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {
                mViewPager.setCurrentItem(tab.getPosition());
            }
        };
        tabLayout.addOnTabSelectedListener(onTabSelectedListener);

        //TabLayout tabLayout = (TabLayout) findViewById(R.id.tab_layout);
        //tabLayout.setupWithViewPager(mViewPager);
        /*
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });
        */
        checkFirstRun();
    }

    private void checkFirstRun() {

        final String PREFS_NAME = "MyPrefsFile";
        final String PREF_VERSION_CODE_KEY = "version_code";
        final int DOESNT_EXIST = -1;


        // Get current version code
        int currentVersionCode = 0;
        try {
            currentVersionCode = getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return;
        }

        // Get saved version code
        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
        int savedVersionCode = prefs.getInt(PREF_VERSION_CODE_KEY, DOESNT_EXIST);

        // Check for first run or upgrade
        if (currentVersionCode == savedVersionCode) {

            // This is just a normal run
            return;

        } else if (savedVersionCode == DOESNT_EXIST) {
            showPermissionNotification();

        } else if (currentVersionCode > savedVersionCode) {
            showPermissionNotification();

        }
        // Update the shared preferences with the current version code
        prefs.edit().putInt(PREF_VERSION_CODE_KEY, currentVersionCode).commit();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // if the service is still bound to this activity...
        if (mConnection != null) {
            // ...unbind it to prevent data leaks
            unbindService(mConnection);
        }
        if (mReceiver != null) {
            unregisterReceiver(mReceiver);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_options, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onFragmentInteraction(Uri uri) {

    }

    /*
    @Override
    public void onScanItemClick(String timestamp){
        Fragment_old_apps fragment = new Fragment_old_apps();
        // Insert the fragment by replacing any existing fragment
        FragmentManager fragmentManager = getSupportFragmentManager();
        Bundle bundle = new Bundle();
        bundle.putString("timestamp", timestamp);
        fragment.setArguments(bundle);
        fragmentManager.beginTransaction()
                .replace(R.id.container, fragment, timestamp)
                .commit();
    }
    */

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";

        public PlaceholderFragment() {
        }

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            TextView textView = (TextView) rootView.findViewById(R.id.section_label);
            textView.setText(getString(R.string.section_format, getArguments().getInt(ARG_SECTION_NUMBER)));
            return rootView;
        }
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class SectionsPagerAdapter extends FragmentPagerAdapter {

        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {

            switch (position) {
                case 0:
                    Fragment_new f = new Fragment_new();
                    return f;

                case 1:
                    return new Fragment_old();

                case 2:
                    return new Fragment_blacklist();

                default:
                    return null;
            }

            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            //return PlaceholderFragment.newInstance(position + 1);
        }

        @Override
        public int getCount() {
            // Show 3 total pages.
            return 3;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return getString(R.string.newAnalysis);
                case 1:
                    return getString(R.string.oldAnalysis);
                case 2:
                    return getString(R.string.blacklist);
            }
            return null;
        }
    }

    public void settingsButton(MenuItem item) {
        Intent intent = new Intent(getApplicationContext(), SettingsPage.class);
        startActivity(intent);
    }

    public void getHelp(MenuItem item) {

    }

    public void getAboutUs(MenuItem item) {

    }

    void showPermissionNotification() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        builder.setTitle(R.string.permissionNotificationTitle);
        builder.setMessage(R.string.permissionNotificationMessage);
        builder.setPositiveButton(R.string.permissionNotificationPositive, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                usageManager.setPermission();
            }
        });

        builder.create();
        builder.show();
    }

    // button start analyzing
    public void startStopAnalyzing(View view) {

        if (!analyzing) {
            // set the time of the analysis start to current time
            analysis_start.setTime(System.currentTimeMillis());

            //button.setText("Scan stoppen");
            SqliteDBHelper.getInstance(this).query("DELETE FROM data_aggregate");
            Toast.makeText(getApplicationContext(), R.string.toastStartScan, Toast.LENGTH_SHORT).show();

            // start the analyzing process in the background service
            startService(new Intent(getApplicationContext(), MyService.class));
            mService.startAnalyzing(analysis_start.getTime());
        }
        else{
            //button.setText("Scan starten");
            Toast.makeText(getApplicationContext(), R.string.toastStopScan, Toast.LENGTH_SHORT).show();
            // stop the analyzing process in the background service
            mService.stopAnalyzing();
            // show an notification with the current entries in the DB
            showNotification();
            // try to write the content of DB into a text file
            mService.DBtoFile(this);
            stopService(new Intent(getApplicationContext(), MyService.class));

            startDatamining();;
        }
    }

    public void applyLocalChanges () {
        Toast.makeText(getApplicationContext(), R.string.automaticShutdownMessage, Toast.LENGTH_SHORT).show();
        // stop the analyzing process in the background service
        mService.stopAnalyzing();
        // show an notification with the current entries in the DB
        showNotification();
        // try to write the content of DB into a text file
        mService.DBtoFile(this);
        stopService(new Intent(getApplicationContext(), MyService.class));

        startDatamining();;
    }

    public void applyViewInFragmet() {
        FragmentManager man = getSupportFragmentManager();
        List<Fragment> list = man.getFragments();
        if (list.size() > 0) {
            Fragment_new fNew = (Fragment_new) list.get(0);
            fNew.applyChanges();
        }
    }


    void startDatamining() {
        Intent intent = new Intent(getApplicationContext(), Datamining.class);
        intent.putExtra(IDENTIFIER, analysis_start.getTime());
        startService(intent);
    }


    // show a notification
    public void showNotification() {
        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);

        Notification notification = new Notification.Builder(this)
                .setSmallIcon(R.drawable.boo)
                .setContentTitle("Analysis completed")
                .setContentText("Entries in DB: " + SqliteDBHelper.getInstance(this).entries_T1())
                .build();

        notificationManager.notify(0, notification);
    }


    // callback for the permission request
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case 1:
                // if permission has been granted by the user, execute code
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    mService.writeDBtoFile();
                }
        }
    }

    // callback for the ActivityCompact request to set the UsageStats permission
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode){
            case UsageManager.MY_PERMISSIONS_REQUEST_PACKAGE_USAGE_STATS:
                if (!usageManager.hasPermission()){
                    startActivityForResult(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS), UsageManager.MY_PERMISSIONS_REQUEST_PACKAGE_USAGE_STATS);
                }
                break;
        }
    }

    // bind and auto start the background service
    private void bindBackgroundService() {
        Intent intent = new Intent(getApplicationContext(), MyService.class);
        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
    }

    // Defines callbacks for service binding, passed to bindService()
    private ServiceConnection mConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            // We've bound to the Service, cast the IBinder and get Service instance
            MyService.LocalBinder binder = (MyService.LocalBinder) iBinder;
            // set this classes mService to the service instance
            mService = binder.getService();
            // service is bound
            isBound = true;
        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            isBound = false;
        }
    };

    private void registerReceiver(){
        //Register BroadcastReceiver
        //to receive event from our service
        mReceiver = new MyReceiver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ANALYZING);
        intentFilter.addAction(Intent.ACTION_SCREEN_ON);
        intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
        registerReceiver(mReceiver, intentFilter);
    }

    // class of receiver, the magic is here...
    private class MyReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context arg0, Intent arg1) {
            switch (arg1.getAction()) {
                case ANALYZING: checkAnalyzing(arg1);break;
                case Intent.ACTION_SCREEN_ON: Log.d("MAIN", "screen on"); PermissionLogReader.screen_state = 1; break;
                case Intent.ACTION_SCREEN_OFF: Log.d("MAIN", "screen off"); PermissionLogReader.screen_state = 0; break;
            }
        }

        void checkAnalyzing (Intent arg1) {
            if (arg1.hasExtra("analyzing")) {
                analyzing = arg1.getBooleanExtra("analyzing", false);
                applyViewInFragmet();
            } else if (arg1.hasExtra("forceStop")) {
                analyzing = arg1.getBooleanExtra("analyzing", false);
                applyLocalChanges();
            }
        }
    }

}