package com.op_dfat;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AppOpsManager;
import android.app.usage.UsageEvents;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.SystemClock;
import android.provider.Settings;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

/**
 * Created by arrigo on 12/4/16.
 */

public class UsageManager {

    public static final int MY_PERMISSIONS_REQUEST_PACKAGE_USAGE_STATS = 1;

    public static UsageManager usageManager = null;

    private Context context;
    private Activity activity;

    private Date checkDate;

    private UsageStatsManager lUsageStatsManager;

    public enum State {
        EXCEPTION, // -100
        UNKNOWN, // -2
        SYSTEM_SERVICE, // -1
        INACTIV, // 0
        RUNNING_BG, // 1
        RUNNING_FG, // 2
        USER_INTERACTION, // 3
    }

    private UsageManager(Context ctx, Activity act) {
        this.context = ctx;
        this.activity = act;
        checkDate = new Date();
        // get a reference to the UsageStatsManager
        lUsageStatsManager = (UsageStatsManager) context.getSystemService(Context.USAGE_STATS_SERVICE);
    }

    public static UsageManager getInstance(Context cxt, Activity act) {
        if (usageManager == null) {
            usageManager = new UsageManager(cxt, act);
        }
        return usageManager;
    }

    public boolean hasPermission() {
        AppOpsManager appOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);
        int mode = appOps.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, android.os.Process.myUid(), context.getPackageName());
        return mode == AppOpsManager.MODE_ALLOWED;
    }

    public void setPermission () {
        // check, whether the phone has permission to access the phone's usage stats
        if (!hasPermission()) {
            Intent intent = new Intent();
            intent.setAction(Settings.ACTION_USAGE_ACCESS_SETTINGS);
            intent.addCategory(Intent.CATEGORY_DEFAULT);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
            intent.addFlags(Intent.FLAG_ACTIVITY_TASK_ON_HOME);
            activity.startActivityForResult(intent, MY_PERMISSIONS_REQUEST_PACKAGE_USAGE_STATS);
        }
    }


    private Map<String, UsageStats> readUsageLog() {
        setPermission();
        // get all usage stats of the day
        return lUsageStatsManager.queryAndAggregateUsageStats(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1), System.currentTimeMillis() + TimeUnit.DAYS.toMillis(1));
    }

    private UsageEvents getUsageEvents () {
        return lUsageStatsManager.queryEvents(System.currentTimeMillis() - TimeUnit.HOURS.toMillis(1), System.currentTimeMillis() + TimeUnit.HOURS.toMillis(1));
    }


    public State checkUsageLog(String packageName, Date accessTime) {
        Map<String, UsageStats> lUsageStatsList = readUsageLog();

        if (lUsageStatsList != null && lUsageStatsList.size() != 0) {
            if (lUsageStatsList.containsKey(packageName)) {
                UsageStats usageStat = lUsageStatsList.get(packageName);
                checkUsageEvent(packageName, accessTime);
                return checkAppStatus(usageStat, accessTime);
            } else {
                if (isAppPreLoaded(packageName))
                    return State.SYSTEM_SERVICE;
                else
                    return State.INACTIV;
            }
        } else {
            Log.d("USAGEMANAGER", "usage permission not set");
            return State.EXCEPTION;
        }
    }

    private State checkAppStatus (UsageStats u, Date accessTime) {

        checkDate.setTime(u.getLastTimeUsed());

        if (lUsageStatsManager.isAppInactive(u.getPackageName())) {
            Log.d("INACTIV", Utility.packageToAppName(context, u.getPackageName()) + " = " + checkDate);
            return State.INACTIV;
        } else {
            return checkUsageEvent(u.getPackageName(), accessTime);
            //return checkAppActivityInterval(u, accessTime);
        }
    }

    private State checkAppActivityInterval(UsageStats u, Date accessTime) {
        checkUsageEvent(u.getPackageName(), accessTime);

        if (u.getLastTimeUsed() >= (accessTime.getTime() - TimeUnit.SECONDS.toMillis(10)) &&
                u.getLastTimeUsed() <= (accessTime.getTime() + TimeUnit.SECONDS.toMillis(10))) {
            Log.d("IN_FOREGROUND", Utility.packageToAppName(context, u.getPackageName()) + " = " + Utility.dateTime(checkDate));
            return State.RUNNING_FG;
        } else {
            //check_services(u.getPackageName());
            Log.d("IN_BACKGROUND", Utility.packageToAppName(context, u.getPackageName()) + " = " + Utility.dateTime(checkDate));
            return State.RUNNING_BG;
        }
    }

    private boolean timeWithinInterval(long time, long begin, long end) {
        return (time >= begin && time <= end);
    }

    private State checkUsageEvent(String packageName, Date accesTime) {
        UsageEvents events = lUsageStatsManager.queryEvents(accesTime.getTime() - TimeUnit.DAYS.toMillis(1), accesTime.getTime() + TimeUnit.HOURS.toMillis(1));
        UsageEvents.Event event = new UsageEvents.Event();
        State currentState = State.INACTIV;
        String appName = "";

        while (events.hasNextEvent()) {
            events.getNextEvent(event);
            if (event.getPackageName().equals(packageName)) {
                switch (event.getEventType()) {
                    case UsageEvents.Event.MOVE_TO_BACKGROUND:
                        currentState = State.RUNNING_BG;
                        appName = Utility.packageToAppName(context, event.getPackageName());
                        break;
                    case UsageEvents.Event.MOVE_TO_FOREGROUND:
                        currentState = State.RUNNING_FG;
                        appName = Utility.packageToAppName(context, event.getPackageName());
                        break;
                    case UsageEvents.Event.USER_INTERACTION:
                        currentState = State.USER_INTERACTION;
                        appName = Utility.packageToAppName(context, event.getPackageName());
                        break;
                }
            }
        }

        if (currentState == State.INACTIV && isAppPreLoaded(packageName)) {
            currentState = State.SYSTEM_SERVICE;
        }
        Log.d("EVENTS", (currentState == State.INACTIV || currentState == State.SYSTEM_SERVICE?Utility.packageToAppName(context, packageName):appName) + " " + currentState.name() + " " + Utility.dateTime(new Date(event.getTimeStamp())));
        return currentState;
    }

    public boolean isSystemApp(String packageName) {
        PackageManager mPackageManager = context.getPackageManager();

        try {
            // Get packageinfo for target application
            PackageInfo targetPkgInfo = mPackageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
            // Get packageinfo for system package
            PackageInfo sys = mPackageManager.getPackageInfo("android", PackageManager.GET_SIGNATURES);
            // Match both packageinfo for there signatures
            return (targetPkgInfo != null && targetPkgInfo.signatures != null && sys.signatures[0].equals(targetPkgInfo.signatures[0]));
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    public boolean isAppPreLoaded(String packageName) {
        PackageManager mPackageManager = context.getPackageManager();

        try {
            ApplicationInfo ai = mPackageManager.getApplicationInfo(packageName, 0);
            // First check if it is preloaded.
            // If yes then check if it is System app or not.
            if (ai != null && (ai.flags & (ApplicationInfo.FLAG_SYSTEM | ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0) {
                // Check if signature matches
                return isSystemApp(packageName);
            }
        } catch (PackageManager.NameNotFoundException e) {
        }
        return false;
    }

    public List<ActivityManager.RunningServiceInfo> read_running_services() {
        ActivityManager activityManager =(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
        return activityManager.getRunningServices(Integer.MAX_VALUE);
    }

    public void check_services(String process) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfos = read_running_services();

        if (runningServiceInfos.size() != 0 && runningServiceInfos != null) {
            for(ActivityManager.RunningServiceInfo r: runningServiceInfos) {
                if (r.process.equals(process) && r.restarting == 0) {
                    // currently running services
                    //Log.d("SERVICE", getAppNameFromPackage(r.service.getPackageName()) + " - process: "+ getAppNameFromPackage(r.process));
                }
            }
        } else {
            Log.d("Error", "Error");
        }
    }
}
